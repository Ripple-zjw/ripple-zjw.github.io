<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分治算法 on LeaveIt</title>
    <link>https://ripple-zjw.github.io/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 分治算法 on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 21 Sep 2019 15:32:09 +0800</lastBuildDate>
    
	<atom:link href="https://ripple-zjw.github.io/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漂亮数组</title>
      <link>https://ripple-zjw.github.io/2019/%E6%BC%82%E4%BA%AE%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 21 Sep 2019 15:32:09 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E6%BC%82%E4%BA%AE%E6%95%B0%E7%BB%84/</guid>
      <description>题目：漂亮数组  对于某些固定的N，如果数组A是整数1, 2, ..., N组成的排列，使得： 对于每个i &amp;lt; j，都不存在k满足i &amp;lt; k &amp;lt; j使得A[k] * 2 = A[i] + A[j]。 那么数组A是漂亮数组。 给定N，返回任意漂亮数组A（保证存在一个）。  示例 1： 输入：4 输出：[2,1,4,3]  示例 2： 输入：5 输出：[3,1,2,5,4]  提示：  1 &amp;lt;= N &amp;lt;= 1000  来源：力扣（LeetCode）第932题  链接：https://leetcode-cn.com/problems/beautiful-array
 分析：  根据题目的要求，所谓漂亮数组就是A[k] * 2 != A[i] + A[j]。 A[k] * 2一定是一个偶数，那么我们只需要让A[i] + A[j]是奇数就行了，如果我们把奇数放在左边，偶数放在右边，那么左右两边各取一个数相加一定是奇数。 那么还有一个问题，若i是偶数，j也是偶数怎么办？ 如果我们要知道8个数的漂亮数组，首先8有4个奇数，4个偶数，我们需要知道4个数的漂亮数组，如果要知道4个数的漂亮数组又要分为2奇数，2偶数，直到为1个数时，漂亮数组为[1]。 漂亮数组又有一个性质，如果我们把数组中每个元素都乘以a并且加上b(a,b为任意除0外的数)，那么它还是漂亮数组。 同样的我们把奇偶两个漂亮数组相加，结果还是漂亮数组。 既然如此，[1]是漂亮数组，那么我将1*2-1也是是漂亮数组，我将1*2也是漂亮数组，我把这两个数放在一起，也就是[1,2]也是漂亮数组。以此类推，4个数的漂亮数组就是[1,3,2,4],8个数就是[1,5,3,7,2,6,4,8]。如果数不足8个多于4个，我只需要把多余的拿掉就行了。 通过这种方式，可以发现，比如奇数部分的数两数相加除以2要么是偶数，要么在中间根本找不到这个数。  代码：  分治算法：
class Solution: def beautifulArray(self, N: int) -&amp;gt; List[int]: def divi(N): ans = {1: [1]} if N not in ans: odds = divi((N + 1) // 2) evens = divi(N // 2) ans[N] = [2 * odd - 1 for odd in odds] + [2 * even for even in evens] return ans[N] return divi(N)  分治法的迭代版本：</description>
    </item>
    
    <item>
      <title>数组中的第K个最大元素</title>
      <link>https://ripple-zjw.github.io/2019/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 21 Sep 2019 15:30:13 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
      <description>题目：数组中的第K个最大元素  在未排序的数组中找到第k个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。  示例 1: 输入: [3,2,1,5,6,4] 和 k = 2 输出: 5  示例 2: 输入: [3,2,3,1,2,4,5,5,6] 和 k = 4 输出: 4  说明:  你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。  来源：力扣（LeetCode）第215题  链接：https://leetcode-cn.com/problems/kth-largest-element-in-an-array
 分析：  有两种做法，一种是使用快排思想，选中一个数，对其进行partition。 第二种做法是使用堆，维护一个大顶堆，要拿到第k大元素就删除堆顶k次  代码：  快速排序改进：
class Solution: def findKthLargest(self, nums: List[int], k: int) -&amp;gt; int: self.k = k ans = self.quickSort(nums, 0, len(nums) - 1) return ans if ans else nums[k-1] def portition(self, arr, start, end): pivot = arr[end] i = start - 1 for j in range(start, end): if pivot &amp;lt; arr[j]: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[end] = arr[end], arr[i+1] return i + 1 def quickSort(self, arr, start, end): if start &amp;lt; end: pivot = self.</description>
    </item>
    
    <item>
      <title>为运算表达式设计优先级</title>
      <link>https://ripple-zjw.github.io/2019/%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Tue, 10 Sep 2019 22:59:46 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>题目：为运算表达式设计优先级  给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含+,-以及*。  示例 1: 输入: &amp;quot;2-1-1&amp;quot; 输出: [0, 2] 解释: ((2-1)-1) = 0 (2-(1-1)) = 2  示例 2: 输入: &amp;quot;2*3-4*5&amp;quot; 输出: [-34, -14, -10, -10, 10] 解释: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10  来源：力扣（LeetCode）第241题  链接：https://leetcode-cn.com/problems/different-ways-to-add-parentheses
 ## 分析： - 动态规划+分治算法。 - 当只有一个运算符时，只有一种情况，当有两个运算符时有两种情况，以此类推。 - 当有三个运算符时，假设第一个运算符优先级最高，然后剩下三个数有两种情况，将两种情况与其相加，得到答案。接着判断第二个运算符优先级最低时，依次类推。
代码： from functools import lru_cache # lru缓存淘汰算法。 class Solution: @lru_cache(None) def diffWaysToCompute(self, input: str) -&amp;gt; List[int]: if input.</description>
    </item>
    
    <item>
      <title>求众数</title>
      <link>https://ripple-zjw.github.io/2019/%E6%B1%82%E4%BC%97%E6%95%B0/</link>
      <pubDate>Fri, 30 Aug 2019 19:17:44 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E6%B1%82%E4%BC%97%E6%95%B0/</guid>
      <description>题目：求众数  给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于⌊ n/2 ⌋的元素。 你可以假设数组是非空的，并且给定的数组总是存在众数。  示例 1: 输入: [3,2,3] 输出: 3  示例 2: 输入: [2,2,1,1,1,2,2] 输出: 2  来源：力扣（LeetCode）第169题  链接：https://leetcode-cn.com/problems/majority-element
 分析： 这道题很经典，方法有很多，暴力法，分治法，哈希法，排序法，随机法，投票法。我自己用了哈希法做出来的，但是官方的投票法真的是太秀了，这里着重讲投票法。
思路：  先让第一个人作为candidate， 然后和它一样的元素给他加票，不一样的元素给它减票， 当票数为0时，就换掉candidate，让新的元素担任。 最后成为candidate的元素就是众数。 当然，前提是题目给出地假设一定存在众数。  代码：  投票法：
class Solution: def majorityElement(self, nums: List[int]) -&amp;gt; int: candidate = 0 count = 0 for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 return candidate  哈希法：(自己做的)</description>
    </item>
    
  </channel>
</rss>