<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆向工作法 on LeaveIt</title>
    <link>https://ripple-zjw.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E4%BD%9C%E6%B3%95/</link>
    <description>Recent content in 逆向工作法 on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 10 Sep 2019 22:44:21 +0800</lastBuildDate>
    
	<atom:link href="https://ripple-zjw.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E4%BD%9C%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>合并两个有序数组</title>
      <link>https://ripple-zjw.github.io/2019/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 10 Sep 2019 22:44:21 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>题目：合并两个有序数组  给定两个有序整数数组nums1和nums2，将nums2 合并到nums1中，使得num1成为一个有序数组。  说明:  初始化nums1和nums2的元素数量分别为m和n。 你可以假设nums1有足够的空间（空间大小大于或等于m + n）来保存 nums2 中的元素。  示例: 输入: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 输出: [1,2,2,3,5,6]  来源：力扣（LeetCode）第88题  链接：https://leetcode-cn.com/problems/merge-sorted-array
 分析：  从后往前放元素，就能解开了。  代码：  Python
class Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&amp;gt; None: p1 = m - 1 # num1的指针 p2 = n - 1 # num2的指针 p = m + n - 1 # num1存放答案的指针 while p1 &amp;gt;= 0 and p2 &amp;gt;= 0: # 将两者大的值放进去。 if nums1[p1] &amp;gt; nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1 nums1[:p2+1] = nums2[:p2+1] # 最后将nums2中还没放完的元素放进去。  Java</description>
    </item>
    
    <item>
      <title>二叉树的后序遍历</title>
      <link>https://ripple-zjw.github.io/2019/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Fri, 23 Aug 2019 12:49:52 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>题目：二叉树的后序遍历  给定一个二叉树，返回它的 后序 遍历。  示例: 输入: [1,null,2,3] 1 \ 2 / 3 输出: [3,2,1]  进阶:递归算法很简单，你可以通过迭代算法完成吗？
来源：力扣（LeetCode）第145题  链接：https://leetcode-cn.com/problems/binary-tree-postorder-traversal
 分析： 方法有很多，递归法最简单，迭代法使用栈辅助完成，还有莫里斯遍历。本文讲解官方写的题解迭代法。虽然我也写出了迭代法，但是官方的解法既简单又高效，非常厉害。使用了迭代法+逆向工作法。
思路：  后序遍历是左，右，中。可是中在最后，如果正常解后序遍历的话有的复杂。 如果我们用中，右，左这样来遍历的话岂不是将后序遍历变成了前序遍历的翻版类型。 这样的话答案只是与我们要求的答案相反，翻转一下列表就可以了。 所以解法就是一个反向的先序遍历方法。  代码：  官方的迭代法+逆向工作法
# Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def postorderTraversal(self, root: TreeNode) -&amp;gt; List[int]: if root is None: return [] stack = [root] res = [] while stack: root = stack.</description>
    </item>
    
    <item>
      <title>132模式</title>
      <link>https://ripple-zjw.github.io/2019/132%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 19 Aug 2019 22:52:15 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/132%E6%A8%A1%E5%BC%8F/</guid>
      <description>题目：132模式 给定一个整数序列：a1, a2, ..., an，一个132模式的子序列ai, aj, ak被定义为：当 i &amp;lt; j &amp;lt; k时，ai &amp;lt; ak &amp;lt; aj。设计一个算法，当给定有 n 个数字的序列时，验证这个序列中是否含有132模式的子序列。 - 注意：n 的值小于15000。
示例1: 输入: [1, 2, 3, 4] 输出: False 解释: 序列中不存在132模式的子序列。  示例 2: 输入: [3, 1, 4, 2] 输出: True 解释: 序列中有 1 个132模式的子序列： [1, 4, 2].  示例 3: 输入: [-1, 3, 2, 0] 输出: True 解释: 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0].</description>
    </item>
    
  </channel>
</rss>