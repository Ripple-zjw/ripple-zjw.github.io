<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01背包问题 on LeaveIt</title>
    <link>https://ripple-zjw.github.io/tags/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 01背包问题 on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 09 Nov 2019 21:14:39 +0800</lastBuildDate>
    
	<atom:link href="https://ripple-zjw.github.io/tags/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>目标和</title>
      <link>https://ripple-zjw.github.io/2019/%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
      <pubDate>Sat, 09 Nov 2019 21:14:39 +0800</pubDate>
      
      <guid>https://ripple-zjw.github.io/2019/%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
      <description>题目：目标和  给定一个非负整数数组，a1, a2, &amp;hellip;, an, 和一个目标数，S。现在你有两个符号+和-。对于数组中的任意一个整数，你都可以从+或-中选择一个符号添加在前面。 返回可以使最终数组和为目标数 S 的所有添加符号的方法数。  示例 1: 输入: nums: [1, 1, 1, 1, 1], S: 3 输出: 5 解释: -1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3 一共有5种方法让最终目标和为3。  注意:  数组非空，且长度不会超过20。 初始的数组的和不会超过1000。 保证返回的最终结果能被32位整数存下。  来源：力扣（LeetCode）第494题  链接：https://leetcode-cn.com/problems/target-sum
 分析：  这是一道动态规划题，也可以使用dfs完成。 此外，还有一种使用数学方法来简化的dp。 常规dp很简单，第一个状态是当前为第几个，第二个状态为当前的和是多少。 我们有两种选择，第一种是当前为+号，那么用当前的和减去当前的值去找上一次的和。 如果当前是-号，就用当前的和加上当前的值去找上一次的和。 然后来看看数学方法简化dp。 设x为其中一个解的正数和，y为其中一个解的负数和的绝对值。 因此我们可以得到两个公式 x + y = sum(sum是整个数组的和) x - y = S(S是目标值) 上下一相加，得x = (sum + S) / 2 因此我们只要知道x有多少种可能就行了 所以问题转化为01背包问题，找到当长度为数组长度时，x有多少种可能。状态直接转为一维。 x也就是符号为正的情况。  代码：  先放上常规dp</description>
    </item>
    
  </channel>
</rss>